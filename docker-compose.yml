version: "3.7"

services:

  # Define our individual services

  flask:

    # Build the flask service using the Dockerfile in the flask directory
    #build: ./flask
    build: https://github.com/CharlesDampeyrou/calcul-de-points-FFCK.git

    # Give our flask container a friendly name
    container_name: flask

    # Instruct Docker to always restart the service
    restart: always

    # Use environment to set any environment variables
    environment:
      - PRODUCTION=true
      - RUNNING_IN_DOCKER=true

    # Any ports listed using `expose` will only be accessible to internal services/containers
    # uWSGI will be serving our Flask application on port 8080
    expose:
      - 8080
    depends_on:
      - MongoDB

    # Mount the container log directory to the local log directory
    # Consider changing this to /var/log/uwsgi:/var/log/uwsgi in production
    # Just make sure the directory exists before running docker-compose up --build
    volumes:
      - uwsgi_logs:/var/log/uwsgi

  nginx:

    # Build the nginx service using the Dockerfile in the nginx directory
    build: ./nginx

    # Give our nginx container a friendly name
    container_name: nginx

    # Instruct Docker to always restart the service
    restart: always

    # Any ports listed using `ports` will be exposed to the outside world
    ports:
      - "80:80"

    depends_on:
      - flask

    # Mount the container log directory to the local log directory
    # Consider changing this to /var/log/nginx:/var/log/nginx in production
    # Just make sure the directory exists before running docker-compose up --build
    volumes:
      - nginx_logs:/var/log/nginx


  MongoDB:
#    image : mongo

    # NÃ©cessaire sur raspberry car architecture ARM
    image: mongo@sha256:ec63238cfff22866241104a425892204c2eb76fe4eed53661b24db9bacbdf446
    container_name: mongo
    environment:
      MONGODB_DATA_DIR: /data/db
    expose:
      - 27017
    volumes:
      - mongo_database:/data/db


volumes:
  mongo_database:
  nginx_logs:
  uwsgi_logs:
